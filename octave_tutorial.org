#+TITLE: Octave tutorial
* Basic operations
[570] $ octave
GNU Octave, version 3.8.2
Copyright (C) 2014 John W. Eaton and others.
This is free software; see the source code for copying conditions.
There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  For details, type 'warranty'.

Octave was configured for "x86_64-apple-darwin13.4.0".

Additional information about Octave is available at http://www.octave.org.

Please contribute if you find this software useful.
For more information, visit http://www.octave.org/get-involved.html

Read http://www.octave.org/bugs.html to learn how to submit bug reports.
For information about changes from previous versions, type 'news'.

** Arithmetic operations
#+BEGIN_SRC octave
>> 5+6
ans =  11
>> 12-21
ans = -9
>> 1/3
ans =  0.33333
>> 2^8
ans =  256
#+END_SRC
** Comparisons
#+BEGIN_SRC octave
>> 2 == 3
ans = 0
>> 2 == 2
ans =  1
>> 2 != 2
ans = 0
>> 2 != 3
ans =  1
>> 2 ~= 3
ans =  1
>> 2 ~= 2
ans = 0
>> # it seems like my version of octave supports "!=" syntax
#+END_SRC
** Boolean operations
*** AND
#+BEGIN_SRC octave
>> 1 && 1
ans =  1
>> 1 && 0 # AND
ans = 0
>> (2 ~= 2) && (2~=3) # AND
ans = 0
#+END_SRC
*** OR
#+BEGIN_SRC octave
>> (2 ~= 2) || (2~=3) # OR
ans =  1
>> 1 || 0
ans =  1
>> 0 || 0
ans = 0
#+END_SRC
*** XOR
#+BEGIN_SRC octave
>> xor(1,0)
ans =  1
>> xor(1,1)
ans = 0
>> xor(0,0)
ans = 0
#+END_SRC

** Changing Octave prompt
Unicode symbols work too (tested on osx with iterm).
#+BEGIN_SRC octave
octave:1> PS1(">> ");
>> 
>> PS1(">> ");
>> 
#+END_SRC

** Variables
#+BEGIN_SRC octave
>> a = 3
a =  3
>> a = 3; % Semicolumn supresses output
>>
>> b = "hi";
>> c = (3>=1);
>> c
c =  1
>> ~c
ans = 0
>> !c
ans = 0
>>
>> a=pi
a =  3.1416
>> disp(a)
 3.1416
>> disp(sprintf("2 decimals: %0.2f", a))
2 decimals: 3.14
>> disp(sprintf("5 decimals: %0.5f", a))
5 decimals: 3.14159
>> a
a =  3.1416
>> format long
>> a
a =  3.14159265358979
>> format short
>> a
a =  3.1416
#+END_SRC

** Creating vectors and matrices
*** By hand
#+BEGIN_SRC octave
>> A = [1 2; 3 4; 5 6] % semicolumn separates rows
A =

   1   2
   3   4
   5   6

>> A = [1 2;
> 3 4;
> 5 6]
A =

   1   2
   3   4
   5   6

>> v = [1 2 3]
v =

   1   2   3
#+END_SRC

*** Create vecors using ranges
#+BEGIN_SRC octave
>> v = 1:0.1:2 % from 1 to 2 with step 0.1, both endpoints are included
v =

 Columns 1 through 10:

    1.0000    1.1000    1.2000    1.3000    1.4000    1.5000    1.6000    1.7000    1.8000    1.9000

 Column 11:

    2.0000

>> v = 1:6
v =

   1   2   3   4   5   6
#+END_SRC

*** Functions to create matrices
#+BEGIN_SRC octave
>> ones(2,3)
ans =

   1   1   1
   1   1   1

>> c = 3 * ones(2,3)
c =

   3   3   3
   3   3   3

>> w = ones(1,5)
w =

   1   1   1   1   1

>> w = zeros(1,5)
w =

   0   0   0   0   0

>> w = rand(1,3)
w =

   0.84446   0.49074   0.30663

>> w = rand(3,3)
w =

   0.25653   0.17238   0.72107
   0.25684   0.60223   0.21351
   0.27028   0.82813   0.54329

>> w
w =

   0.25653   0.17238   0.72107
   0.25684   0.60223   0.21351
   0.27028   0.82813   0.54329

>> rand(3,3)
ans =

   0.257626   0.666799   0.998073
   0.257261   0.974016   0.076000
   0.539996   0.461993   0.449552

>> rand(3,3)
ans =

   0.1873625   0.0071556   0.7856844
   0.9248128   0.0853511   0.3405137
   0.8889975   0.4580640   0.9173196

>> randn(3,3)
ans =

   0.0022478  -0.2927811   1.5534334
   1.0861788   0.1731338  -0.9350777
  -0.7204803  -0.1479890  -0.3008871
>> w = -6 + sqrt(10)*(randn(1,10000));
>> hist(w)
>> hist(w, 100)
>> hist(w, 100)
>> eye(4) % Creates 4 by 4 identity matrix
ans =

Diagonal Matrix

   1   0   0   0
   0   1   0   0
   0   0   1   0
   0   0   0   1

>> eye(7)
ans =

Diagonal Matrix

   1   0   0   0   0   0   0
   0   1   0   0   0   0   0
   0   0   1   0   0   0   0
   0   0   0   1   0   0   0
   0   0   0   0   1   0   0
   0   0   0   0   0   1   0
   0   0   0   0   0   0   1
#+END_SRC

** Getting help
#+BEGIN_SRC octave
>> help eye
>> help rand
>> help help
#+END_SRC octave

